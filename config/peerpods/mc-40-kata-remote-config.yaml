apiVersion: machineconfiguration.openshift.io/v1
kind: MachineConfig
metadata:
  labels:
    machineconfiguration.openshift.io/role: worker
  name: 40-worker-kata-remote-config
spec:
  config:
    ignition:
      version: 2.2.0
    storage:
      files:
      - contents:
              source: data:text/plain;charset=utf-8;base64,IyBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOSBJbnRlbCBDb3Jwb3JhdGlvbgojCiMgU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjAKIwoKIyBYWFg6IFdBUk5JTkc6IHRoaXMgZmlsZSBpcyBhdXRvLWdlbmVyYXRlZC4KIyBYWFg6CiMgWFhYOiBTb3VyY2UgZmlsZTogImNvbmZpZy9jb25maWd1cmF0aW9uLXFlbXUudG9tbC5pbiIKIyBYWFg6IFByb2plY3Q6CiMgWFhYOiAgIE5hbWU6IEthdGEgQ29udGFpbmVycwojIFhYWDogICBUeXBlOiBrYXRhCgoKW2h5cGVydmlzb3IucmVtb3RlXQpyZW1vdGVfaHlwZXJ2aXNvcl9zb2NrZXQgPSAiL3J1bi9wZWVycG9kL2h5cGVydmlzb3Iuc29jayIKcmVtb3RlX2h5cGVydmlzb3JfdGltZW91dCA9IDEyMAoKCiMgRW5hYmxlIGNvbmZpZGVudGlhbCBndWVzdCBzdXBwb3J0LgojIFRvZ2dsaW5nIHRoYXQgc2V0dGluZyBtYXkgdHJpZ2dlciBkaWZmZXJlbnQgaGFyZHdhcmUgZmVhdHVyZXMsIHJhbmdpbmcKIyBmcm9tIG1lbW9yeSBlbmNyeXB0aW9uIHRvIGJvdGggbWVtb3J5IGFuZCBDUFUtc3RhdGUgZW5jcnlwdGlvbiBhbmQgaW50ZWdyaXR5LgojIFRoZSBLYXRhIENvbnRhaW5lcnMgcnVudGltZSBkeW5hbWljYWxseSBkZXRlY3RzIHRoZSBhdmFpbGFibGUgZmVhdHVyZSBzZXQgYW5kCiMgYWltcyBhdCBlbmFibGluZyB0aGUgbGFyZ2VzdCBwb3NzaWJsZSBvbmUuCiMgRGVmYXVsdCBmYWxzZQojIGNvbmZpZGVudGlhbF9ndWVzdCA9IHRydWUKCiMgRW5hYmxlIHJ1bm5pbmcgUUVNVSBWTU0gYXMgYSBub24tcm9vdCB1c2VyLgojIEJ5IGRlZmF1bHQgUUVNVSBWTU0gcnVuIGFzIHJvb3QuIFdoZW4gdGhpcyBpcyBzZXQgdG8gdHJ1ZSwgUUVNVSBWTU0gcHJvY2VzcyBydW5zIGFzCiMgYSBub24tcm9vdCByYW5kb20gdXNlci4gU2VlIGRvY3VtZW50YXRpb24gZm9yIHRoZSBsaW1pdGF0aW9ucyBvZiB0aGlzIG1vZGUuCiMgcm9vdGxlc3MgPSB0cnVlCgojIExpc3Qgb2YgdmFsaWQgYW5ub3RhdGlvbiBuYW1lcyBmb3IgdGhlIGh5cGVydmlzb3IKIyBFYWNoIG1lbWJlciBvZiB0aGUgbGlzdCBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiwgd2hpY2ggaXMgdGhlIGJhc2UgbmFtZQojIG9mIHRoZSBhbm5vdGF0aW9uLCBlLmcuICJwYXRoIiBmb3IgaW8ua2F0YWNvbnRhaW5lcnMuY29uZmlnLmh5cGVydmlzb3IucGF0aCIKZW5hYmxlX2Fubm90YXRpb25zID0gW10KCiMgTGlzdCBvZiB2YWxpZCBhbm5vdGF0aW9ucyB2YWx1ZXMgZm9yIHRoZSBoeXBlcnZpc29yCiMgRWFjaCBtZW1iZXIgb2YgdGhlIGxpc3QgaXMgYSBwYXRoIHBhdHRlcm4gYXMgZGVzY3JpYmVkIGJ5IGdsb2IoMykuCiMgVGhlIGRlZmF1bHQgaWYgbm90IHNldCBpcyBlbXB0eSAoYWxsIGFubm90YXRpb25zIHJlamVjdGVkLikKIyBZb3VyIGRpc3RyaWJ1dGlvbiByZWNvbW1lbmRzOiBbIi91c3IvYmluL3FlbXUtc3lzdGVtLXg4Nl82NCJdCnZhbGlkX2h5cGVydmlzb3JfcGF0aHMgPSBbIi91c3IvbGliZXhlYy9xZW11LWtpd2kiXQoKIyBPcHRpb25hbCBzcGFjZS1zZXBhcmF0ZWQgbGlzdCBvZiBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIGd1ZXN0IGtlcm5lbC4KIyBGb3IgZXhhbXBsZSwgdXNlIGBrZXJuZWxfcGFyYW1zID0gInZzeXNjYWxsPWVtdWxhdGUiYCBpZiB5b3UgYXJlIGhhdmluZwojIHRyb3VibGUgcnVubmluZyBwcmUtMi4xNSBnbGliYy4KIwojIFdBUk5JTkc6IC0gYW55IHBhcmFtZXRlciBzcGVjaWZpZWQgaGVyZSB3aWxsIHRha2UgcHJpb3JpdHkgb3ZlciB0aGUgZGVmYXVsdAojIHBhcmFtZXRlciB2YWx1ZSBvZiB0aGUgc2FtZSBuYW1lIHVzZWQgdG8gc3RhcnQgdGhlIHZpcnR1YWwgbWFjaGluZS4KIyBEbyBub3Qgc2V0IHZhbHVlcyBoZXJlIHVubGVzcyB5b3UgdW5kZXJzdGFuZCB0aGUgaW1wYWN0IG9mIGRvaW5nIHNvIGFzIHlvdQojIG1heSBzdG9wIHRoZSB2aXJ0dWFsIG1hY2hpbmUgZnJvbSBib290aW5nLgojIFRvIHNlZSB0aGUgbGlzdCBvZiBkZWZhdWx0IHBhcmFtZXRlcnMsIGVuYWJsZSBoeXBlcnZpc29yIGRlYnVnLCBjcmVhdGUgYQojIGNvbnRhaW5lciBhbmQgbG9vayBmb3IgJ2RlZmF1bHQta2VybmVsLXBhcmFtZXRlcnMnIGxvZyBlbnRyaWVzLgprZXJuZWxfcGFyYW1zID0gImFnZW50LmxvZz1kZWJ1ZyIKCiMgUGF0aCB0byB0aGUgZmlybXdhcmUuCiMgSWYgeW91IHdhbnQgdGhhdCBxZW11IHVzZXMgdGhlIGRlZmF1bHQgZmlybXdhcmUgbGVhdmUgdGhpcyBvcHRpb24gZW1wdHkKZmlybXdhcmUgPSAiIgoKIyBNYWNoaW5lIGFjY2VsZXJhdG9ycwojIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIG1hY2hpbmUgYWNjZWxlcmF0b3JzIHRvIHBhc3MgdG8gdGhlIGh5cGVydmlzb3IuCiMgRm9yIGV4YW1wbGUsIGBtYWNoaW5lX2FjY2VsZXJhdG9ycyA9ICJub3NtbSxub3NtYnVzLG5vc2F0YSxub3BpdCxzdGF0aWMtcHJ0LG5vZnciYAptYWNoaW5lX2FjY2VsZXJhdG9ycz0iIgoKIyBDUFUgZmVhdHVyZXMKIyBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBjcHUgZmVhdHVyZXMgdG8gcGFzcyB0byB0aGUgY3B1CiMgRm9yIGV4YW1wbGUsIGBjcHVfZmVhdHVyZXMgPSAicG11PW9mZix2bXg9b2ZmIgpjcHVfZmVhdHVyZXM9InBtdT1vZmYiCgojIERlZmF1bHQgbnVtYmVyIG9mIHZDUFVzIHBlciBTQi9WTToKIyB1bnNwZWNpZmllZCBvciAwICAgICAgICAgICAgICAgIC0tPiB3aWxsIGJlIHNldCB0byAxCiMgPCAwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLT4gd2lsbCBiZSBzZXQgdG8gdGhlIGFjdHVhbCBudW1iZXIgb2YgcGh5c2ljYWwgY29yZXMKIyA+IDAgPD0gbnVtYmVyIG9mIHBoeXNpY2FsIGNvcmVzIC0tPiB3aWxsIGJlIHNldCB0byB0aGUgc3BlY2lmaWVkIG51bWJlcgojID4gbnVtYmVyIG9mIHBoeXNpY2FsIGNvcmVzICAgICAgLS0+IHdpbGwgYmUgc2V0IHRvIHRoZSBhY3R1YWwgbnVtYmVyIG9mIHBoeXNpY2FsIGNvcmVzCmRlZmF1bHRfdmNwdXMgPSAxCgojIERlZmF1bHQgbWF4aW11bSBudW1iZXIgb2YgdkNQVXMgcGVyIFNCL1ZNOgojIHVuc3BlY2lmaWVkIG9yID09IDAgICAgICAgICAgICAgLS0+IHdpbGwgYmUgc2V0IHRvIHRoZSBhY3R1YWwgbnVtYmVyIG9mIHBoeXNpY2FsIGNvcmVzIG9yIHRvIHRoZSBtYXhpbXVtIG51bWJlcgojICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIHZDUFVzIHN1cHBvcnRlZCBieSBLVk0gaWYgdGhhdCBudW1iZXIgaXMgZXhjZWVkZWQKIyA+IDAgPD0gbnVtYmVyIG9mIHBoeXNpY2FsIGNvcmVzIC0tPiB3aWxsIGJlIHNldCB0byB0aGUgc3BlY2lmaWVkIG51bWJlcgojID4gbnVtYmVyIG9mIHBoeXNpY2FsIGNvcmVzICAgICAgLS0+IHdpbGwgYmUgc2V0IHRvIHRoZSBhY3R1YWwgbnVtYmVyIG9mIHBoeXNpY2FsIGNvcmVzIG9yIHRvIHRoZSBtYXhpbXVtIG51bWJlcgojICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIHZDUFVzIHN1cHBvcnRlZCBieSBLVk0gaWYgdGhhdCBudW1iZXIgaXMgZXhjZWVkZWQKIyBXQVJOSU5HOiBEZXBlbmRpbmcgb2YgdGhlIGFyY2hpdGVjdHVyZSwgdGhlIG1heGltdW0gbnVtYmVyIG9mIHZDUFVzIHN1cHBvcnRlZCBieSBLVk0gaXMgdXNlZCB3aGVuCiMgdGhlIGFjdHVhbCBudW1iZXIgb2YgcGh5c2ljYWwgY29yZXMgaXMgZ3JlYXRlciB0aGFuIGl0LgojIFdBUk5JTkc6IEJlIGF3YXJlIHRoYXQgdGhpcyB2YWx1ZSBpbXBhY3RzIHRoZSB2aXJ0dWFsIG1hY2hpbmUncyBtZW1vcnkgZm9vdHByaW50IGFuZCBDUFUKIyB0aGUgaG90cGx1ZyBmdW5jdGlvbmFsaXR5LiBGb3IgZXhhbXBsZSwgYGRlZmF1bHRfbWF4dmNwdXMgPSAyNDBgIHNwZWNpZmllcyB0aGF0IHVudGlsIDI0MCB2Q1BVcwojIGNhbiBiZSBhZGRlZCB0byBhIFNCL1ZNLCBidXQgdGhlIG1lbW9yeSBmb290cHJpbnQgd2lsbCBiZSBiaWcuIEFub3RoZXIgZXhhbXBsZSwgd2l0aAojIGBkZWZhdWx0X21heHZjcHVzID0gOGAgdGhlIG1lbW9yeSBmb290cHJpbnQgd2lsbCBiZSBzbWFsbCwgYnV0IDggd2lsbCBiZSB0aGUgbWF4aW11bSBudW1iZXIgb2YKIyB2Q1BVcyBzdXBwb3J0ZWQgYnkgdGhlIFNCL1ZNLiBJbiBnZW5lcmFsLCB3ZSByZWNvbW1lbmQgdGhhdCB5b3UgZG8gbm90IGVkaXQgdGhpcyB2YXJpYWJsZSwKIyB1bmxlc3MgeW91IGtub3cgd2hhdCBhcmUgeW91IGRvaW5nLgojIE5PVElDRTogb24gYXJtIHBsYXRmb3JtIHdpdGggZ2ljdjIgaW50ZXJydXB0IGNvbnRyb2xsZXIsIHNldCBpdCB0byA4LgpkZWZhdWx0X21heHZjcHVzID0gMAoKIyBCcmlkZ2VzIGNhbiBiZSB1c2VkIHRvIGhvdCBwbHVnIGRldmljZXMuCiMgTGltaXRhdGlvbnM6CiMgKiBDdXJyZW50bHkgb25seSBwY2kgYnJpZGdlcyBhcmUgc3VwcG9ydGVkCiMgKiBVbnRpbCAzMCBkZXZpY2VzIHBlciBicmlkZ2UgY2FuIGJlIGhvdCBwbHVnZ2VkLgojICogVW50aWwgNSBQQ0kgYnJpZGdlcyBjYW4gYmUgY29sZCBwbHVnZ2VkIHBlciBWTS4KIyAgIFRoaXMgbGltaXRhdGlvbiBjb3VsZCBiZSBhIGJ1ZyBpbiBxZW11IG9yIGluIHRoZSBrZXJuZWwKIyBEZWZhdWx0IG51bWJlciBvZiBicmlkZ2VzIHBlciBTQi9WTToKIyB1bnNwZWNpZmllZCBvciAwICAgLS0+IHdpbGwgYmUgc2V0IHRvIDEKIyA+IDEgPD0gNSAgICAgICAgICAgLS0+IHdpbGwgYmUgc2V0IHRvIHRoZSBzcGVjaWZpZWQgbnVtYmVyCiMgPiA1ICAgICAgICAgICAgICAgIC0tPiB3aWxsIGJlIHNldCB0byA1CmRlZmF1bHRfYnJpZGdlcyA9IDEKCiMgRGVmYXVsdCBtZW1vcnkgc2l6ZSBpbiBNaUIgZm9yIFNCL1ZNLgojIElmIHVuc3BlY2lmaWVkIHRoZW4gaXQgd2lsbCBiZSBzZXQgMjA0OCBNaUIuCmRlZmF1bHRfbWVtb3J5ID0gMjA0OAojCiMgRGVmYXVsdCBtZW1vcnkgc2xvdHMgcGVyIFNCL1ZNLgojIElmIHVuc3BlY2lmaWVkIHRoZW4gaXQgd2lsbCBiZSBzZXQgMTAuCiMgVGhpcyBpcyB3aWxsIGRldGVybWluZSB0aGUgdGltZXMgdGhhdCBtZW1vcnkgd2lsbCBiZSBob3RhZGRlZCB0byBzYW5kYm94L1ZNLgojbWVtb3J5X3Nsb3RzID0gMTAKCiMgVGhlIHNpemUgaW4gTWlCIHdpbGwgYmUgcGx1c2VkIHRvIG1heCBtZW1vcnkgb2YgaHlwZXJ2aXNvci4KIyBJdCBpcyB0aGUgbWVtb3J5IGFkZHJlc3Mgc3BhY2UgZm9yIHRoZSBOVkRJTU0gZGV2aWUuCiMgSWYgc2V0IGJsb2NrIHN0b3JhZ2UgZHJpdmVyIChibG9ja19kZXZpY2VfZHJpdmVyKSB0byAibnZkaW1tIiwKIyBzaG91bGQgc2V0IG1lbW9yeV9vZmZzZXQgdG8gdGhlIHNpemUgb2YgYmxvY2sgZGV2aWNlLgojIERlZmF1bHQgMAojbWVtb3J5X29mZnNldCA9IDAKCiMgU3BlY2lmaWVzIHZpcnRpby1tZW0gd2lsbCBiZSBlbmFibGVkIG9yIG5vdC4KIyBQbGVhc2Ugbm90ZSB0aGF0IHRoaXMgb3B0aW9uIHNob3VsZCBiZSB1c2VkIHdpdGggdGhlIGNvbW1hbmQKIyAiZWNobyAxID4gL3Byb2Mvc3lzL3ZtL292ZXJjb21taXRfbWVtb3J5Ii4KIyBEZWZhdWx0IGZhbHNlCiNlbmFibGVfdmlydGlvX21lbSA9IHRydWUKCiMgRGlzYWJsZSBibG9jayBkZXZpY2UgZnJvbSBiZWluZyB1c2VkIGZvciBhIGNvbnRhaW5lcidzIHJvb3Rmcy4KIyBJbiBjYXNlIG9mIGEgc3RvcmFnZSBkcml2ZXIgbGlrZSBkZXZpY2VtYXBwZXIgd2hlcmUgYSBjb250YWluZXIncwojIHJvb3QgZmlsZSBzeXN0ZW0gaXMgYmFja2VkIGJ5IGEgYmxvY2sgZGV2aWNlLCB0aGUgYmxvY2sgZGV2aWNlIGlzIHBhc3NlZAojIGRpcmVjdGx5IHRvIHRoZSBoeXBlcnZpc29yIGZvciBwZXJmb3JtYW5jZSByZWFzb25zLgojIFRoaXMgZmxhZyBwcmV2ZW50cyB0aGUgYmxvY2sgZGV2aWNlIGZyb20gYmVpbmcgcGFzc2VkIHRvIHRoZSBoeXBlcnZpc29yLAojIDlwZnMgaXMgdXNlZCBpbnN0ZWFkIHRvIHBhc3MgdGhlIHJvb3Rmcy4KZGlzYWJsZV9ibG9ja19kZXZpY2VfdXNlID0gZmFsc2UKCiMgU2hhcmVkIGZpbGUgc3lzdGVtIHR5cGU6CiMgICAtIHZpcnRpby1mcyAoZGVmYXVsdCkKIyAgIC0gdmlydGlvLTlwCnNoYXJlZF9mcyA9ICJ2aXJ0aW8tZnMiCgojIFBhdGggdG8gdmhvc3QtdXNlci1mcyBkYWVtb24uCnZpcnRpb19mc19kYWVtb24gPSAiL3Vzci9saWJleGVjL3ZpcnRpb2ZzZCIKCiMgTGlzdCBvZiB2YWxpZCBhbm5vdGF0aW9ucyB2YWx1ZXMgZm9yIHRoZSB2aXJ0aW9mcyBkYWVtb24KIyBUaGUgZGVmYXVsdCBpZiBub3Qgc2V0IGlzIGVtcHR5IChhbGwgYW5ub3RhdGlvbnMgcmVqZWN0ZWQuKQojIFlvdXIgZGlzdHJpYnV0aW9uIHJlY29tbWVuZHM6IFsiL3Vzci9saWJleGVjL2thdGEtcWVtdS92aXJ0aW9mc2QiXQp2YWxpZF92aXJ0aW9fZnNfZGFlbW9uX3BhdGhzID0gWyIvdXNyL2xpYmV4ZWMvdmlydGlvZnNkIl0KCiMgRGVmYXVsdCBzaXplIG9mIERBWCBjYWNoZSBpbiBNaUIKdmlydGlvX2ZzX2NhY2hlX3NpemUgPSAwCgojIEV4dHJhIGFyZ3MgZm9yIHZpcnRpb2ZzZCBkYWVtb24KIwojIEZvcm1hdCBleGFtcGxlOgojICAgWyItbyIsICJhcmcxPXh4eCxhcmcyIiwgIi1vIiwgImhlbGxvIHdvcmxkIiwgIi0tYXJnMz15eXkiXQojCiMgc2VlIGB2aXJ0aW9mc2QgLWhgIGZvciBwb3NzaWJsZSBvcHRpb25zLgp2aXJ0aW9fZnNfZXh0cmFfYXJncyA9IFsiLS10aHJlYWQtcG9vbC1zaXplPTEiXQoKIyBDYWNoZSBtb2RlOgojCiMgIC0gbm9uZQojICAgIE1ldGFkYXRhLCBkYXRhLCBhbmQgcGF0aG5hbWUgbG9va3VwIGFyZSBub3QgY2FjaGVkIGluIGd1ZXN0LiBUaGV5IGFyZQojICAgIGFsd2F5cyBmZXRjaGVkIGZyb20gaG9zdCBhbmQgYW55IGNoYW5nZXMgYXJlIGltbWVkaWF0ZWx5IHB1c2hlZCB0byBob3N0LgojCiMgIC0gYXV0bwojICAgIE1ldGFkYXRhIGFuZCBwYXRobmFtZSBsb29rdXAgY2FjaGUgZXhwaXJlcyBhZnRlciBhIGNvbmZpZ3VyZWQgYW1vdW50IG9mCiMgICAgdGltZSAoZGVmYXVsdCBpcyAxIHNlY29uZCkuIERhdGEgaXMgY2FjaGVkIHdoaWxlIHRoZSBmaWxlIGlzIG9wZW4gKGNsb3NlCiMgICAgdG8gb3BlbiBjb25zaXN0ZW5jeSkuCiMKIyAgLSBhbHdheXMKIyAgICBNZXRhZGF0YSwgZGF0YSwgYW5kIHBhdGhuYW1lIGxvb2t1cCBhcmUgY2FjaGVkIGluIGd1ZXN0IGFuZCBuZXZlciBleHBpcmUuCnZpcnRpb19mc19jYWNoZSA9ICJhdXRvIgoKIyBCbG9jayBzdG9yYWdlIGRyaXZlciB0byBiZSB1c2VkIGZvciB0aGUgaHlwZXJ2aXNvciBpbiBjYXNlIHRoZSBjb250YWluZXIKIyByb290ZnMgaXMgYmFja2VkIGJ5IGEgYmxvY2sgZGV2aWNlLiBUaGlzIGlzIHZpcnRpby1zY3NpLCB2aXJ0aW8tYmxrCiMgb3IgbnZkaW1tLgpibG9ja19kZXZpY2VfZHJpdmVyID0gInZpcnRpby1zY3NpIgoKIyBTcGVjaWZpZXMgY2FjaGUtcmVsYXRlZCBvcHRpb25zIHdpbGwgYmUgc2V0IHRvIGJsb2NrIGRldmljZXMgb3Igbm90LgojIERlZmF1bHQgZmFsc2UKI2Jsb2NrX2RldmljZV9jYWNoZV9zZXQgPSB0cnVlCgojIFNwZWNpZmllcyBjYWNoZS1yZWxhdGVkIG9wdGlvbnMgZm9yIGJsb2NrIGRldmljZXMuCiMgRGVub3RlcyB3aGV0aGVyIHVzZSBvZiBPX0RJUkVDVCAoYnlwYXNzIHRoZSBob3N0IHBhZ2UgY2FjaGUpIGlzIGVuYWJsZWQuCiMgRGVmYXVsdCBmYWxzZQojYmxvY2tfZGV2aWNlX2NhY2hlX2RpcmVjdCA9IHRydWUKCiMgU3BlY2lmaWVzIGNhY2hlLXJlbGF0ZWQgb3B0aW9ucyBmb3IgYmxvY2sgZGV2aWNlcy4KIyBEZW5vdGVzIHdoZXRoZXIgZmx1c2ggcmVxdWVzdHMgZm9yIHRoZSBkZXZpY2UgYXJlIGlnbm9yZWQuCiMgRGVmYXVsdCBmYWxzZQojYmxvY2tfZGV2aWNlX2NhY2hlX25vZmx1c2ggPSB0cnVlCgojIEVuYWJsZSBpb3RocmVhZHMgKGRhdGEtcGxhbmUpIHRvIGJlIHVzZWQuIFRoaXMgY2F1c2VzIElPIHRvIGJlCiMgaGFuZGxlZCBpbiBhIHNlcGFyYXRlIElPIHRocmVhZC4gVGhpcyBpcyBjdXJyZW50bHkgb25seSBpbXBsZW1lbnRlZAojIGZvciBTQ1NJLgojCmVuYWJsZV9pb3RocmVhZHMgPSBmYWxzZQoKIyBFbmFibGUgcHJlIGFsbG9jYXRpb24gb2YgVk0gUkFNLCBkZWZhdWx0IGZhbHNlCiMgRW5hYmxpbmcgdGhpcyB3aWxsIHJlc3VsdCBpbiBsb3dlciBjb250YWluZXIgZGVuc2l0eQojIGFzIGFsbCBvZiB0aGUgbWVtb3J5IHdpbGwgYmUgYWxsb2NhdGVkIGFuZCBsb2NrZWQKIyBUaGlzIGlzIHVzZWZ1bCB3aGVuIHlvdSB3YW50IHRvIHJlc2VydmUgYWxsIHRoZSBtZW1vcnkKIyB1cGZyb250IG9yIGluIHRoZSBjYXNlcyB3aGVyZSB5b3Ugd2FudCBtZW1vcnkgbGF0ZW5jaWVzCiMgdG8gYmUgdmVyeSBwcmVkaWN0YWJsZQojIERlZmF1bHQgZmFsc2UKI2VuYWJsZV9tZW1fcHJlYWxsb2MgPSB0cnVlCgojIEVuYWJsZSBodWdlIHBhZ2VzIGZvciBWTSBSQU0sIGRlZmF1bHQgZmFsc2UKIyBFbmFibGluZyB0aGlzIHdpbGwgcmVzdWx0IGluIHRoZSBWTSBtZW1vcnkKIyBiZWluZyBhbGxvY2F0ZWQgdXNpbmcgaHVnZSBwYWdlcy4KIyBUaGlzIGlzIHVzZWZ1bCB3aGVuIHlvdSB3YW50IHRvIHVzZSB2aG9zdC11c2VyIG5ldHdvcmsKIyBzdGFja3Mgd2l0aGluIHRoZSBjb250YWluZXIuIFRoaXMgd2lsbCBhdXRvbWF0aWNhbGx5CiMgcmVzdWx0IGluIG1lbW9yeSBwcmUgYWxsb2NhdGlvbgojZW5hYmxlX2h1Z2VwYWdlcyA9IHRydWUKCiMgRW5hYmxlIHZob3N0LXVzZXIgc3RvcmFnZSBkZXZpY2UsIGRlZmF1bHQgZmFsc2UKIyBFbmFibGluZyB0aGlzIHdpbGwgcmVzdWx0IGluIHNvbWUgTGludXggcmVzZXJ2ZWQgYmxvY2sgdHlwZQojIG1ham9yIHJhbmdlIDI0MC0yNTQgYmVpbmcgY2hvc2VuIHRvIHJlcHJlc2VudCB2aG9zdC11c2VyIGRldmljZXMuCmVuYWJsZV92aG9zdF91c2VyX3N0b3JlID0gZmFsc2UKCiMgVGhlIGJhc2UgZGlyZWN0b3J5IHNwZWNpZmljYWxseSB1c2VkIGZvciB2aG9zdC11c2VyIGRldmljZXMuCiMgSXRzIHN1Yi1wYXRoICJibG9jayIgaXMgdXNlZCBmb3IgYmxvY2sgZGV2aWNlczsgImJsb2NrL3NvY2tldHMiIGlzCiMgd2hlcmUgd2UgZXhwZWN0IHZob3N0LXVzZXIgc29ja2V0cyB0byBsaXZlOyAiYmxvY2svZGV2aWNlcyIgaXMgd2hlcmUKIyBzaW11bGF0ZWQgYmxvY2sgZGV2aWNlIG5vZGVzIGZvciB2aG9zdC11c2VyIGRldmljZXMgdG8gbGl2ZS4Kdmhvc3RfdXNlcl9zdG9yZV9wYXRoID0gIi92YXIvcnVuL2thdGEtY29udGFpbmVycy92aG9zdC11c2VyIgoKIyBFbmFibGUgdklPTU1VLCBkZWZhdWx0IGZhbHNlCiMgRW5hYmxpbmcgdGhpcyB3aWxsIHJlc3VsdCBpbiB0aGUgVk0gaGF2aW5nIGEgdklPTU1VIGRldmljZQojIFRoaXMgd2lsbCBhbHNvIGFkZCB0aGUgZm9sbG93aW5nIG9wdGlvbnMgdG8gdGhlIGtlcm5lbCdzCiMgY29tbWFuZCBsaW5lOiBpbnRlbF9pb21tdT1vbixpb21tdT1wdAojZW5hYmxlX2lvbW11ID0gdHJ1ZQoKIyBFbmFibGUgSU9NTVVfUExBVEZPUk0sIGRlZmF1bHQgZmFsc2UKIyBFbmFibGluZyB0aGlzIHdpbGwgcmVzdWx0IGluIHRoZSBWTSBkZXZpY2UgaGF2aW5nIGlvbW11X3BsYXRmb3JtPW9uIHNldAojZW5hYmxlX2lvbW11X3BsYXRmb3JtID0gdHJ1ZQoKIyBMaXN0IG9mIHZhbGlkIGFubm90YXRpb25zIHZhbHVlcyBmb3IgdGhlIHZob3N0IHVzZXIgc3RvcmUgcGF0aAojIFRoZSBkZWZhdWx0IGlmIG5vdCBzZXQgaXMgZW1wdHkgKGFsbCBhbm5vdGF0aW9ucyByZWplY3RlZC4pCiMgWW91ciBkaXN0cmlidXRpb24gcmVjb21tZW5kczogWyIvdmFyL3J1bi9rYXRhLWNvbnRhaW5lcnMvdmhvc3QtdXNlciJdCnZhbGlkX3Zob3N0X3VzZXJfc3RvcmVfcGF0aHMgPSBbIi92YXIvcnVuL2thdGEtY29udGFpbmVycy92aG9zdC11c2VyIl0KCiMgRW5hYmxlIGZpbGUgYmFzZWQgZ3Vlc3QgbWVtb3J5IHN1cHBvcnQuIFRoZSBkZWZhdWx0IGlzIGFuIGVtcHR5IHN0cmluZyB3aGljaAojIHdpbGwgZGlzYWJsZSB0aGlzIGZlYXR1cmUuIEluIHRoZSBjYXNlIG9mIHZpcnRpby1mcywgdGhpcyBpcyBlbmFibGVkCiMgYXV0b21hdGljYWxseSBhbmQgJy9kZXYvc2htJyBpcyB1c2VkIGFzIHRoZSBiYWNraW5nIGZvbGRlci4KIyBUaGlzIG9wdGlvbiB3aWxsIGJlIGlnbm9yZWQgaWYgVk0gdGVtcGxhdGluZyBpcyBlbmFibGVkLgojZmlsZV9tZW1fYmFja2VuZCA9ICIiCgojIExpc3Qgb2YgdmFsaWQgYW5ub3RhdGlvbnMgdmFsdWVzIGZvciB0aGUgZmlsZV9tZW1fYmFja2VuZCBhbm5vdGF0aW9uCiMgVGhlIGRlZmF1bHQgaWYgbm90IHNldCBpcyBlbXB0eSAoYWxsIGFubm90YXRpb25zIHJlamVjdGVkLikKIyBZb3VyIGRpc3RyaWJ1dGlvbiByZWNvbW1lbmRzOiBbIiJdCnZhbGlkX2ZpbGVfbWVtX2JhY2tlbmRzID0gWyIiXQoKIyBFbmFibGUgc3dhcCBvZiB2bSBtZW1vcnkuIERlZmF1bHQgZmFsc2UuCiMgVGhlIGJlaGF2aW91ciBpcyB1bmRlZmluZWQgaWYgbWVtX3ByZWFsbG9jIGlzIGFsc28gc2V0IHRvIHRydWUKI2VuYWJsZV9zd2FwID0gdHJ1ZQoKIyAtcGZsYXNoIGNhbiBhZGQgaW1hZ2UgZmlsZSB0byBWTS4gVGhlIGFyZ3VtZW50cyBvZiBpdCBzaG91bGQgYmUgaW4gZm9ybWF0CiMgb2YgWyIvcGF0aC90by9mbGFzaDAuaW1nIiwgIi9wYXRoL3RvL2ZsYXNoMS5pbWciXQpwZmxhc2hlcyA9IFtdCgojIFRoaXMgb3B0aW9uIGNoYW5nZXMgdGhlIGRlZmF1bHQgaHlwZXJ2aXNvciBhbmQga2VybmVsIHBhcmFtZXRlcnMKIyB0byBlbmFibGUgZGVidWcgb3V0cHV0IHdoZXJlIGF2YWlsYWJsZS4KIwojIERlZmF1bHQgZmFsc2UKZW5hYmxlX2RlYnVnID0gdHJ1ZQoKIyBEaXNhYmxlIHRoZSBjdXN0b21pemF0aW9ucyBkb25lIGluIHRoZSBydW50aW1lIHdoZW4gaXQgZGV0ZWN0cwojIHRoYXQgaXQgaXMgcnVubmluZyBvbiB0b3AgYSBWTU0uIFRoaXMgd2lsbCByZXN1bHQgaW4gdGhlIHJ1bnRpbWUKIyBiZWhhdmluZyBhcyBpdCB3b3VsZCB3aGVuIHJ1bm5pbmcgb24gYmFyZSBtZXRhbC4KIwojZGlzYWJsZV9uZXN0aW5nX2NoZWNrcyA9IHRydWUKCiMgVGhpcyBpcyB0aGUgbXNpemUgdXNlZCBmb3IgOXAgc2hhcmVzLiBJdCBpcyB0aGUgbnVtYmVyIG9mIGJ5dGVzCiMgdXNlZCBmb3IgOXAgcGFja2V0IHBheWxvYWQuCiNtc2l6ZV85cCA9IDgxOTIKCiMgSWYgZmFsc2UgYW5kIG52ZGltbSBpcyBzdXBwb3J0ZWQsIHVzZSBudmRpbW0gZGV2aWNlIHRvIHBsdWcgZ3Vlc3QgaW1hZ2UuCiMgT3RoZXJ3aXNlIHZpcnRpby1ibG9jayBkZXZpY2UgaXMgdXNlZC4KIyBEZWZhdWx0IGlzIGZhbHNlCiNkaXNhYmxlX2ltYWdlX252ZGltbSA9IHRydWUKCiMgVkZJTyBkZXZpY2VzIGFyZSBob3RwbHVnZ2VkIG9uIGEgYnJpZGdlIGJ5IGRlZmF1bHQuCiMgRW5hYmxlIGhvdHBsdWdnaW5nIG9uIHJvb3QgYnVzLiBUaGlzIG1heSBiZSByZXF1aXJlZCBmb3IgZGV2aWNlcyB3aXRoCiMgYSBsYXJnZSBQQ0kgYmFyLCBhcyB0aGlzIGlzIGEgY3VycmVudCBsaW1pdGF0aW9uIHdpdGggaG90cGx1Z2dpbmcgb24KIyBhIGJyaWRnZS4KIyBEZWZhdWx0IGZhbHNlCiNob3RwbHVnX3ZmaW9fb25fcm9vdF9idXMgPSB0cnVlCgojIEJlZm9yZSBob3QgcGx1Z2dpbmcgYSBQQ0llIGRldmljZSwgeW91IG5lZWQgdG8gYWRkIGEgcGNpZV9yb290X3BvcnQgZGV2aWNlLgojIFVzZSB0aGlzIHBhcmFtZXRlciB3aGVuIHVzaW5nIHNvbWUgbGFyZ2UgUENJIGJhciBkZXZpY2VzLCBzdWNoIGFzIE52aWRpYSBHUFUKIyBUaGUgdmFsdWUgbWVhbnMgdGhlIG51bWJlciBvZiBwY2llX3Jvb3RfcG9ydAojIFRoaXMgdmFsdWUgaXMgdmFsaWQgd2hlbiBob3RwbHVnX3ZmaW9fb25fcm9vdF9idXMgaXMgdHJ1ZSBhbmQgbWFjaGluZV90eXBlIGlzICJxMzUiCiMgRGVmYXVsdCAwCiNwY2llX3Jvb3RfcG9ydCA9IDIKCiMgSWYgdmhvc3QtbmV0IGJhY2tlbmQgZm9yIHZpcnRpby1uZXQgaXMgbm90IGRlc2lyZWQsIHNldCB0byB0cnVlLiBEZWZhdWx0IGlzIGZhbHNlLCB3aGljaCB0cmFkZXMgb2ZmCiMgc2VjdXJpdHkgKHZob3N0LW5ldCBydW5zIHJpbmcwKSBmb3IgbmV0d29yayBJL08gcGVyZm9ybWFuY2UuCiNkaXNhYmxlX3Zob3N0X25ldCA9IHRydWUKCiMKIyBEZWZhdWx0IGVudHJvcHkgc291cmNlLgojIFRoZSBwYXRoIHRvIGEgaG9zdCBzb3VyY2Ugb2YgZW50cm9weSAoaW5jbHVkaW5nIGEgcmVhbCBoYXJkd2FyZSBSTkcpCiMgL2Rldi91cmFuZG9tIGFuZCAvZGV2L3JhbmRvbSBhcmUgdHdvIG1haW4gb3B0aW9ucy4KIyBCZSBhd2FyZSB0aGF0IC9kZXYvcmFuZG9tIGlzIGEgYmxvY2tpbmcgc291cmNlIG9mIGVudHJvcHkuICBJZiB0aGUgaG9zdAojIHJ1bnMgb3V0IG9mIGVudHJvcHksIHRoZSBWTXMgYm9vdCB0aW1lIHdpbGwgaW5jcmVhc2UgbGVhZGluZyB0byBnZXQgc3RhcnR1cAojIHRpbWVvdXRzLgojIFRoZSBzb3VyY2Ugb2YgZW50cm9weSAvZGV2L3VyYW5kb20gaXMgbm9uLWJsb2NraW5nIGFuZCBwcm92aWRlcyBhCiMgZ2VuZXJhbGx5IGFjY2VwdGFibGUgc291cmNlIG9mIGVudHJvcHkuIEl0IHNob3VsZCB3b3JrIHdlbGwgZm9yIHByZXR0eSBtdWNoCiMgYWxsIHByYWN0aWNhbCBwdXJwb3Nlcy4KI2VudHJvcHlfc291cmNlPSAiL2Rldi91cmFuZG9tIgoKIyBMaXN0IG9mIHZhbGlkIGFubm90YXRpb25zIHZhbHVlcyBmb3IgZW50cm9weV9zb3VyY2UKIyBUaGUgZGVmYXVsdCBpZiBub3Qgc2V0IGlzIGVtcHR5IChhbGwgYW5ub3RhdGlvbnMgcmVqZWN0ZWQuKQojIFlvdXIgZGlzdHJpYnV0aW9uIHJlY29tbWVuZHM6IFsiL2Rldi91cmFuZG9tIiwiL2Rldi9yYW5kb20iLCIiXQp2YWxpZF9lbnRyb3B5X3NvdXJjZXMgPSBbIi9kZXYvdXJhbmRvbSIsIi9kZXYvcmFuZG9tIiwiIl0KCiMgUGF0aCB0byBPQ0kgaG9vayBiaW5hcmllcyBpbiB0aGUgKmd1ZXN0IHJvb3RmcyouCiMgVGhpcyBkb2VzIG5vdCBhZmZlY3QgaG9zdC1zaWRlIGhvb2tzIHdoaWNoIG11c3QgaW5zdGVhZCBiZSBhZGRlZCB0bwojIHRoZSBPQ0kgc3BlYyBwYXNzZWQgdG8gdGhlIHJ1bnRpbWUuCiMKIyBZb3UgY2FuIGNyZWF0ZSBhIHJvb3RmcyB3aXRoIGhvb2tzIGJ5IGN1c3RvbWl6aW5nIHRoZSBvc2J1aWxkZXIgc2NyaXB0czoKIyBodHRwczovL2dpdGh1Yi5jb20va2F0YS1jb250YWluZXJzL2thdGEtY29udGFpbmVycy90cmVlL21haW4vdG9vbHMvb3NidWlsZGVyCiMKIyBIb29rcyBtdXN0IGJlIHN0b3JlZCBpbiBhIHN1YmRpcmVjdG9yeSBvZiBndWVzdF9ob29rX3BhdGggYWNjb3JkaW5nIHRvIHRoZWlyCiMgaG9vayB0eXBlLCBpLmUuICJndWVzdF9ob29rX3BhdGgve3ByZXN0YXJ0LHBvc3RzdGFydCxwb3N0c3RvcH0iLgojIFRoZSBhZ2VudCB3aWxsIHNjYW4gdGhlc2UgZGlyZWN0b3JpZXMgZm9yIGV4ZWN1dGFibGUgZmlsZXMgYW5kIGFkZCB0aGVtLCBpbgojIGxleGljb2dyYXBoaWNhbCBvcmRlciwgdG8gdGhlIGxpZmVjeWNsZSBvZiB0aGUgZ3Vlc3QgY29udGFpbmVyLgojIEhvb2tzIGFyZSBleGVjdXRlZCBpbiB0aGUgcnVudGltZSBuYW1lc3BhY2Ugb2YgdGhlIGd1ZXN0LiBTZWUgdGhlIG9mZmljaWFsIGRvY3VtZW50YXRpb246CiMgaHR0cHM6Ly9naXRodWIuY29tL29wZW5jb250YWluZXJzL3J1bnRpbWUtc3BlYy9ibG9iL3YxLjAuMS9jb25maWcubWQjcG9zaXgtcGxhdGZvcm0taG9va3MKIyBXYXJuaW5ncyB3aWxsIGJlIGxvZ2dlZCBpZiBhbnkgZXJyb3IgaXMgZW5jb3VudGVyZWQgd2hpbGUgc2Nhbm5pbmcgZm9yIGhvb2tzLAojIGJ1dCBpdCB3aWxsIG5vdCBhYm9ydCBjb250YWluZXIgZXhlY3V0aW9uLgojZ3Vlc3RfaG9va19wYXRoID0gIi91c3Ivc2hhcmUvb2NpL2hvb2tzIgojCiMgVXNlIHJ4IFJhdGUgTGltaXRlciB0byBjb250cm9sIG5ldHdvcmsgSS9PIGluYm91bmQgYmFuZHdpZHRoKHNpemUgaW4gYml0cy9zZWMgZm9yIFNCL1ZNKS4KIyBJbiBRZW11LCB3ZSB1c2UgY2xhc3NmdWwgcWRpc2NzIEhUQihIaWVyYXJjaHkgVG9rZW4gQnVja2V0KSB0byBkaXNjaXBsaW5lIHRyYWZmaWMuCiMgRGVmYXVsdCAwLXNpemVkIHZhbHVlIG1lYW5zIHVubGltaXRlZCByYXRlLgojcnhfcmF0ZV9saW1pdGVyX21heF9yYXRlID0gMAojIFVzZSB0eCBSYXRlIExpbWl0ZXIgdG8gY29udHJvbCBuZXR3b3JrIEkvTyBvdXRib3VuZCBiYW5kd2lkdGgoc2l6ZSBpbiBiaXRzL3NlYyBmb3IgU0IvVk0pLgojIEluIFFlbXUsIHdlIHVzZSBjbGFzc2Z1bCBxZGlzY3MgSFRCKEhpZXJhcmNoeSBUb2tlbiBCdWNrZXQpIGFuZCBpZmIoSW50ZXJtZWRpYXRlIEZ1bmN0aW9uYWwgQmxvY2spCiMgdG8gZGlzY2lwbGluZSB0cmFmZmljLgojIERlZmF1bHQgMC1zaXplZCB2YWx1ZSBtZWFucyB1bmxpbWl0ZWQgcmF0ZS4KI3R4X3JhdGVfbGltaXRlcl9tYXhfcmF0ZSA9IDAKCiMgU2V0IHdoZXJlIHRvIHNhdmUgdGhlIGd1ZXN0IG1lbW9yeSBkdW1wIGZpbGUuCiMgSWYgc2V0LCB3aGVuIEdVRVNUX1BBTklDS0VEIGV2ZW50IG9jY3VycmVkLAojIGd1ZXN0IG1lbWVvcnkgd2lsbCBiZSBkdW1wZWQgdG8gaG9zdCBmaWxlc3lzdGVtIHVuZGVyIGd1ZXN0X21lbW9yeV9kdW1wX3BhdGgsCiMgVGhpcyBkaXJlY3Rvcnkgd2lsbCBiZSBjcmVhdGVkIGF1dG9tYXRpY2FsbHkgaWYgaXQgZG9lcyBub3QgZXhpc3QuCiMKIyBUaGUgZHVtcGVkIGZpbGUoYWxzbyBjYWxsZWQgdm1jb3JlKSBjYW4gYmUgcHJvY2Vzc2VkIHdpdGggY3Jhc2ggb3IgZ2RiLgojCiMgV0FSTklORzoKIyAgIER1bXAgZ3Vlc3TigJlzIG1lbW9yeSBjYW4gdGFrZSB2ZXJ5IGxvbmcgZGVwZW5kaW5nIG9uIHRoZSBhbW91bnQgb2YgZ3Vlc3QgbWVtb3J5CiMgICBhbmQgdXNlIG11Y2ggZGlzayBzcGFjZS4KI2d1ZXN0X21lbW9yeV9kdW1wX3BhdGg9Ii92YXIvY3Jhc2gva2F0YSIKCiMgSWYgZW5hYmxlIHBhZ2luZy4KIyBCYXNpY2FsbHksIGlmIHlvdSB3YW50IHRvIHVzZSAiZ2RiIiByYXRoZXIgdGhhbiAiY3Jhc2giLAojIG9yIG5lZWQgdGhlIGd1ZXN0LXZpcnR1YWwgYWRkcmVzc2VzIGluIHRoZSBFTEYgdm1jb3JlLAojIHRoZW4geW91IHNob3VsZCBlbmFibGUgcGFnaW5nLgojCiMgU2VlOiBodHRwczovL3d3dy5xZW11Lm9yZy9kb2NzL21hc3Rlci9xZW11LXFtcC1yZWYuaHRtbCNEdW1wLWd1ZXN0LW1lbW9yeSBmb3IgZGV0YWlscwojZ3Vlc3RfbWVtb3J5X2R1bXBfcGFnaW5nPWZhbHNlCgojIEVuYWJsZSBzd2FwIGluIHRoZSBndWVzdC4gRGVmYXVsdCBmYWxzZS4KIyBXaGVuIGVuYWJsZV9ndWVzdF9zd2FwIGlzIGVuYWJsZWQsIGluc2VydCBhIHJhdyBmaWxlIHRvIHRoZSBndWVzdCBhcyB0aGUgc3dhcCBkZXZpY2UKIyBpZiB0aGUgc3dhcHBpbmVzcyBvZiBhIGNvbnRhaW5lciAoc2V0IGJ5IGFubm90YXRpb24gImlvLmthdGFjb250YWluZXJzLmNvbnRhaW5lci5yZXNvdXJjZS5zd2FwcGluZXNzIikKIyBpcyBiaWdnZXIgdGhhbiAwLgojIFRoZSBzaXplIG9mIHRoZSBzd2FwIGRldmljZSBzaG91bGQgYmUKIyBzd2FwX2luX2J5dGVzIChzZXQgYnkgYW5ub3RhdGlvbiAiaW8ua2F0YWNvbnRhaW5lcnMuY29udGFpbmVyLnJlc291cmNlLnN3YXBfaW5fYnl0ZXMiKSAtIG1lbW9yeV9saW1pdF9pbl9ieXRlcy4KIyBJZiBzd2FwX2luX2J5dGVzIGlzIG5vdCBzZXQsIHRoZSBzaXplIHNob3VsZCBiZSBtZW1vcnlfbGltaXRfaW5fYnl0ZXMuCiMgSWYgc3dhcF9pbl9ieXRlcyBhbmQgbWVtb3J5X2xpbWl0X2luX2J5dGVzIGlzIG5vdCBzZXQsIHRoZSBzaXplIHNob3VsZAojIGJlIGRlZmF1bHRfbWVtb3J5LgojZW5hYmxlX2d1ZXN0X3N3YXAgPSB0cnVlCgpbZmFjdG9yeV0KIyBWTSB0ZW1wbGF0aW5nIHN1cHBvcnQuIE9uY2UgZW5hYmxlZCwgbmV3IFZNcyBhcmUgY3JlYXRlZCBmcm9tIHRlbXBsYXRlCiMgdXNpbmcgdm0gY2xvbmluZy4gVGhleSB3aWxsIHNoYXJlIHRoZSBzYW1lIGluaXRpYWwga2VybmVsLCBpbml0cmFtZnMgYW5kCiMgYWdlbnQgbWVtb3J5IGJ5IG1hcHBpbmcgaXQgcmVhZG9ubHkuIEl0IGhlbHBzIHNwZWVkaW5nIHVwIG5ldyBjb250YWluZXIKIyBjcmVhdGlvbiBhbmQgc2F2ZXMgYSBsb3Qgb2YgbWVtb3J5IGlmIHRoZXJlIGFyZSBtYW55IGthdGEgY29udGFpbmVycyBydW5uaW5nCiMgb24gdGhlIHNhbWUgaG9zdC4KIwojIFdoZW4gZGlzYWJsZWQsIG5ldyBWTXMgYXJlIGNyZWF0ZWQgZnJvbSBzY3JhdGNoLgojCiMgTm90ZTogUmVxdWlyZXMgImluaXRyZD0iIHRvIGJlIHNldCAoImltYWdlPSIgaXMgbm90IHN1cHBvcnRlZCkuCiMKIyBEZWZhdWx0IGZhbHNlCiNlbmFibGVfdGVtcGxhdGUgPSB0cnVlCgojIFNwZWNpZmllcyB0aGUgcGF0aCBvZiB0ZW1wbGF0ZS4KIwojIERlZmF1bHQgIi9ydW4vdmMvdm0vdGVtcGxhdGUiCiN0ZW1wbGF0ZV9wYXRoID0gIi9ydW4vdmMvdm0vdGVtcGxhdGUiCgojIFRoZSBudW1iZXIgb2YgY2FjaGVzIG9mIFZNQ2FjaGU6CiMgdW5zcGVjaWZpZWQgb3IgPT0gMCAgIC0tPiBWTUNhY2hlIGlzIGRpc2FibGVkCiMgPiAwICAgICAgICAgICAgICAgICAgIC0tPiB3aWxsIGJlIHNldCB0byB0aGUgc3BlY2lmaWVkIG51bWJlcgojCiMgVk1DYWNoZSBpcyBhIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyBWTXMgYXMgY2FjaGVzIGJlZm9yZSB1c2luZyBpdC4KIyBJdCBoZWxwcyBzcGVlZCB1cCBuZXcgY29udGFpbmVyIGNyZWF0aW9uLgojIFRoZSBmdW5jdGlvbiBjb25zaXN0cyBvZiBhIHNlcnZlciBhbmQgc29tZSBjbGllbnRzIGNvbW11bmljYXRpbmcKIyB0aHJvdWdoIFVuaXggc29ja2V0LiAgVGhlIHByb3RvY29sIGlzIGdSUEMgaW4gcHJvdG9jb2xzL2NhY2hlL2NhY2hlLnByb3RvLgojIFRoZSBWTUNhY2hlIHNlcnZlciB3aWxsIGNyZWF0ZSBzb21lIFZNcyBhbmQgY2FjaGUgdGhlbSBieSBmYWN0b3J5IGNhY2hlLgojIEl0IHdpbGwgY29udmVydCB0aGUgVk0gdG8gZ1JQQyBmb3JtYXQgYW5kIHRyYW5zcG9ydCBpdCB3aGVuIGdldHMKIyByZXF1ZXN0aW9uIGZyb20gY2xpZW50cy4KIyBGYWN0b3J5IGdycGNjYWNoZSBpcyB0aGUgVk1DYWNoZSBjbGllbnQuICBJdCB3aWxsIHJlcXVlc3QgZ1JQQyBmb3JtYXQKIyBWTSBhbmQgY29udmVydCBpdCBiYWNrIHRvIGEgVk0uICBJZiBWTUNhY2hlIGZ1bmN0aW9uIGlzIGVuYWJsZWQsCiMga2F0YS1ydW50aW1lIHdpbGwgcmVxdWVzdCBWTSBmcm9tIGZhY3RvcnkgZ3JwY2NhY2hlIHdoZW4gaXQgY3JlYXRlcwojIGEgbmV3IHNhbmRib3guCiMKIyBEZWZhdWx0IDAKI3ZtX2NhY2hlX251bWJlciA9IDAKCiMgU3BlY2lmeSB0aGUgYWRkcmVzcyBvZiB0aGUgVW5peCBzb2NrZXQgdGhhdCBpcyB1c2VkIGJ5IFZNQ2FjaGUuCiMKIyBEZWZhdWx0IC92YXIvcnVuL2thdGEtY29udGFpbmVycy9jYWNoZS5zb2NrCiN2bV9jYWNoZV9lbmRwb2ludCA9ICIvdmFyL3J1bi9rYXRhLWNvbnRhaW5lcnMvY2FjaGUuc29jayIKClthZ2VudC5rYXRhXQojIElmIGVuYWJsZWQsIG1ha2UgdGhlIGFnZW50IGRpc3BsYXkgZGVidWctbGV2ZWwgbWVzc2FnZXMuCiMgKGRlZmF1bHQ6IGRpc2FibGVkKQplbmFibGVfZGVidWcgPSB0cnVlCgojIEVuYWJsZSBhZ2VudCB0cmFjaW5nLgojCiMgSWYgZW5hYmxlZCwgdGhlIGFnZW50IHdpbGwgZ2VuZXJhdGUgT3BlblRlbGVtZXRyeSB0cmFjZSBzcGFucy4KIwojIE5vdGVzOgojCiMgLSBJZiB0aGUgcnVudGltZSBhbHNvIGhhcyB0cmFjaW5nIGVuYWJsZWQsIHRoZSBhZ2VudCBzcGFucyB3aWxsIGJlCiMgICBhc3NvY2lhdGVkIHdpdGggdGhlIGFwcHJvcHJpYXRlIHJ1bnRpbWUgcGFyZW50IHNwYW4uCiMgLSBJZiBlbmFibGVkLCB0aGUgcnVudGltZSB3aWxsIHdhaXQgZm9yIHRoZSBjb250YWluZXIgdG8gc2h1dGRvd24sCiMgICBpbmNyZWFzaW5nIHRoZSBjb250YWluZXIgc2h1dGRvd24gdGltZSBzbGlnaHRseS4KIwojIChkZWZhdWx0OiBkaXNhYmxlZCkKI2VuYWJsZV90cmFjaW5nID0gdHJ1ZQoKIyBDb21tYSBzZXBhcmF0ZWQgbGlzdCBvZiBrZXJuZWwgbW9kdWxlcyBhbmQgdGhlaXIgcGFyYW1ldGVycy4KIyBUaGVzZSBtb2R1bGVzIHdpbGwgYmUgbG9hZGVkIGluIHRoZSBndWVzdCBrZXJuZWwgdXNpbmcgbW9kcHJvYmUoOCkuCiMgVGhlIGZvbGxvd2luZyBleGFtcGxlIGNhbiBiZSB1c2VkIHRvIGxvYWQgdHdvIGtlcm5lbCBtb2R1bGVzIHdpdGggcGFyYW1ldGVycwojICAtIGtlcm5lbF9tb2R1bGVzPVsiZTEwMDBlIEludGVycnVwdFRocm90dGxlUmF0ZT0zMDAwLDMwMDAsMzAwMCBFRUU9MSIsICJpOTE1IGVuYWJsZV9wcGd0dD0wIl0KIyBUaGUgZmlyc3Qgd29yZCBpcyBjb25zaWRlcmVkIGFzIHRoZSBtb2R1bGUgbmFtZSBhbmQgdGhlIHJlc3QgYXMgaXRzIHBhcmFtZXRlcnMuCiMgQ29udGFpbmVyIHdpbGwgbm90IGJlIHN0YXJ0ZWQgd2hlbjoKIyAgKiBBIGtlcm5lbCBtb2R1bGUgaXMgc3BlY2lmaWVkIGFuZCB0aGUgbW9kcHJvYmUgY29tbWFuZCBpcyBub3QgaW5zdGFsbGVkIGluIHRoZSBndWVzdAojICAgIG9yIGl0IGZhaWxzIGxvYWRpbmcgdGhlIG1vZHVsZS4KIyAgKiBUaGUgbW9kdWxlIGlzIG5vdCBhdmFpbGFibGUgaW4gdGhlIGd1ZXN0IG9yIGl0IGRvZXNuJ3QgbWV0IHRoZSBndWVzdCBrZXJuZWwKIyAgICByZXF1aXJlbWVudHMsIGxpa2UgYXJjaGl0ZWN0dXJlIGFuZCB2ZXJzaW9uLgojCmtlcm5lbF9tb2R1bGVzPVtdCgojIEVuYWJsZSBkZWJ1ZyBjb25zb2xlLgoKIyBJZiBlbmFibGVkLCB1c2VyIGNhbiBjb25uZWN0IGd1ZXN0IE9TIHJ1bm5pbmcgaW5zaWRlIGh5cGVydmlzb3IKIyB0aHJvdWdoICJrYXRhLXJ1bnRpbWUgZXhlYyA8c2FuZGJveC1pZD4iIGNvbW1hbmQKCmRlYnVnX2NvbnNvbGVfZW5hYmxlZCA9IHRydWUKCiMgQWdlbnQgY29ubmVjdGlvbiBkaWFsaW5nIHRpbWVvdXQgdmFsdWUgaW4gc2Vjb25kcwojIChkZWZhdWx0OiAzMCkKI2RpYWxfdGltZW91dCA9IDMwCgpbbmV0bW9uXQojIElmIGVuYWJsZWQsIHRoZSBuZXR3b3JrIG1vbml0b3JpbmcgcHJvY2VzcyBnZXRzIHN0YXJ0ZWQgd2hlbiB0aGUKIyBzYW5kYm94IGlzIGNyZWF0ZWQuIFRoaXMgYWxsb3dzIGZvciB0aGUgZGV0ZWN0aW9uIG9mIHNvbWUgYWRkaXRpb25hbAojIG5ldHdvcmsgYmVpbmcgYWRkZWQgdG8gdGhlIGV4aXN0aW5nIG5ldHdvcmsgbmFtZXNwYWNlLCBhZnRlciB0aGUKIyBzYW5kYm94IGhhcyBiZWVuIGNyZWF0ZWQuCiMgKGRlZmF1bHQ6IGRpc2FibGVkKQojZW5hYmxlX25ldG1vbiA9IHRydWUKCiMgU3BlY2lmeSB0aGUgcGF0aCB0byB0aGUgbmV0bW9uIGJpbmFyeS4KcGF0aCA9ICIvb3B0L2thdGEvbGliZXhlYy9rYXRhLWNvbnRhaW5lcnMva2F0YS1uZXRtb24iCgojIElmIGVuYWJsZWQsIG5ldG1vbiBtZXNzYWdlcyB3aWxsIGJlIHNlbnQgdG8gdGhlIHN5c3RlbSBsb2cKIyAoZGVmYXVsdDogZGlzYWJsZWQpCmVuYWJsZV9kZWJ1ZyA9IHRydWUKCltydW50aW1lXQojIElmIGVuYWJsZWQsIHRoZSBydW50aW1lIHdpbGwgbG9nIGFkZGl0aW9uYWwgZGVidWcgbWVzc2FnZXMgdG8gdGhlCiMgc3lzdGVtIGxvZwojIChkZWZhdWx0OiBkaXNhYmxlZCkKZW5hYmxlX2RlYnVnID0gdHJ1ZQojCiMgSW50ZXJuZXR3b3JraW5nIG1vZGVsCiMgRGV0ZXJtaW5lcyBob3cgdGhlIFZNIHNob3VsZCBiZSBjb25uZWN0ZWQgdG8gdGhlCiMgdGhlIGNvbnRhaW5lciBuZXR3b3JrIGludGVyZmFjZQojIE9wdGlvbnM6CiMKIyAgIC0gbWFjdnRhcAojICAgICBVc2VkIHdoZW4gdGhlIENvbnRhaW5lciBuZXR3b3JrIGludGVyZmFjZSBjYW4gYmUgYnJpZGdlZCB1c2luZwojICAgICBtYWN2dGFwLgojCiMgICAtIG5vbmUKIyAgICAgVXNlZCB3aGVuIGN1c3RvbWl6ZSBuZXR3b3JrLiBPbmx5IGNyZWF0ZXMgYSB0YXAgZGV2aWNlLiBObyB2ZXRoIHBhaXIuCiMKIyAgIC0gdGNmaWx0ZXIKIyAgICAgVXNlcyB0YyBmaWx0ZXIgcnVsZXMgdG8gcmVkaXJlY3QgdHJhZmZpYyBmcm9tIHRoZSBuZXR3b3JrIGludGVyZmFjZQojICAgICBwcm92aWRlZCBieSBwbHVnaW4gdG8gYSB0YXAgaW50ZXJmYWNlIGNvbm5lY3RlZCB0byB0aGUgVk0uCiMKaW50ZXJuZXR3b3JraW5nX21vZGVsPSJub25lIgoKIyBkaXNhYmxlIGd1ZXN0IHNlY2NvbXAKIyBEZXRlcm1pbmVzIHdoZXRoZXIgY29udGFpbmVyIHNlY2NvbXAgcHJvZmlsZXMgYXJlIHBhc3NlZCB0byB0aGUgdmlydHVhbAojIG1hY2hpbmUgYW5kIGFwcGxpZWQgYnkgdGhlIGthdGEgYWdlbnQuIElmIHNldCB0byB0cnVlLCBzZWNjb21wIGlzIG5vdCBhcHBsaWVkCiMgd2l0aGluIHRoZSBndWVzdAojIChkZWZhdWx0OiB0cnVlKQpkaXNhYmxlX2d1ZXN0X3NlY2NvbXA9dHJ1ZQoKIyBJZiBlbmFibGVkLCB0aGUgcnVudGltZSB3aWxsIGNyZWF0ZSBvcGVudHJhY2luZy5pbyB0cmFjZXMgYW5kIHNwYW5zLgojIChTZWUgaHR0cHM6Ly93d3cuamFlZ2VydHJhY2luZy5pby9kb2NzL2dldHRpbmctc3RhcnRlZCkuCiMgKGRlZmF1bHQ6IGRpc2FibGVkKQojZW5hYmxlX3RyYWNpbmcgPSB0cnVlCgojIFNldCB0aGUgZnVsbCB1cmwgdG8gdGhlIEphZWdlciBIVFRQIFRocmlmdCBjb2xsZWN0b3IuCiMgVGhlIGRlZmF1bHQgaWYgbm90IHNldCB3aWxsIGJlICJodHRwOi8vbG9jYWxob3N0OjE0MjY4L2FwaS90cmFjZXMiCiNqYWVnZXJfZW5kcG9pbnQgPSAiIgoKIyBTZXRzIHRoZSB1c2VybmFtZSB0byBiZSB1c2VkIGlmIGJhc2ljIGF1dGggaXMgcmVxdWlyZWQgZm9yIEphZWdlci4KI2phZWdlcl91c2VyID0gIiIKCiMgU2V0cyB0aGUgcGFzc3dvcmQgdG8gYmUgdXNlZCBpZiBiYXNpYyBhdXRoIGlzIHJlcXVpcmVkIGZvciBKYWVnZXIuCiNqYWVnZXJfcGFzc3dvcmQgPSAiIgoKIyBJZiBlbmFibGVkLCB0aGUgcnVudGltZSB3aWxsIG5vdCBjcmVhdGUgYSBuZXR3b3JrIG5hbWVzcGFjZSBmb3Igc2hpbSBhbmQgaHlwZXJ2aXNvciBwcm9jZXNzZXMuCiMgVGhpcyBvcHRpb24gbWF5IGhhdmUgc29tZSBwb3RlbnRpYWwgaW1wYWN0cyB0byB5b3VyIGhvc3QuIEl0IHNob3VsZCBvbmx5IGJlIHVzZWQgd2hlbiB5b3Uga25vdyB3aGF0IHlvdSdyZSBkb2luZy4KIyBgZGlzYWJsZV9uZXdfbmV0bnNgIGNvbmZsaWN0cyB3aXRoIGBlbmFibGVfbmV0bW9uYAojIGBkaXNhYmxlX25ld19uZXRuc2AgY29uZmxpY3RzIHdpdGggYGludGVybmV0d29ya2luZ19tb2RlbD10Y2ZpbHRlcmAgYW5kIGBpbnRlcm5ldHdvcmtpbmdfbW9kZWw9bWFjdnRhcGAuIEl0IHdvcmtzIG9ubHkKIyB3aXRoIGBpbnRlcm5ldHdvcmtpbmdfbW9kZWw9bm9uZWAuIFRoZSB0YXAgZGV2aWNlIHdpbGwgYmUgaW4gdGhlIGhvc3QgbmV0d29yayBuYW1lc3BhY2UgYW5kIGNhbiBjb25uZWN0IHRvIGEgYnJpZGdlCiMgKGxpa2UgT1ZTKSBkaXJlY3RseS4KIyBJZiB5b3UgYXJlIHVzaW5nIGRvY2tlciwgYGRpc2FibGVfbmV3X25ldG5zYCBvbmx5IHdvcmtzIHdpdGggYGRvY2tlciBydW4gLS1uZXQ9bm9uZWAKIyAoZGVmYXVsdDogZmFsc2UpCmRpc2FibGVfbmV3X25ldG5zID0gdHJ1ZQoKIyBpZiBlbmFibGVkLCB0aGUgcnVudGltZSB3aWxsIGFkZCBhbGwgdGhlIGthdGEgcHJvY2Vzc2VzIGluc2lkZSBvbmUgZGVkaWNhdGVkIGNncm91cC4KIyBUaGUgY29udGFpbmVyIGNncm91cHMgaW4gdGhlIGhvc3QgYXJlIG5vdCBjcmVhdGVkLCBqdXN0IG9uZSBzaW5nbGUgY2dyb3VwIHBlciBzYW5kYm94LgojIFRoZSBydW50aW1lIGNhbGxlciBpcyBmcmVlIHRvIHJlc3RyaWN0IG9yIGNvbGxlY3QgY2dyb3VwIHN0YXRzIG9mIHRoZSBvdmVyYWxsIEthdGEgc2FuZGJveC4KIyBUaGUgc2FuZGJveCBjZ3JvdXAgcGF0aCBpcyB0aGUgcGFyZW50IGNncm91cCBvZiBhIGNvbnRhaW5lciB3aXRoIHRoZSBQb2RTYW5kYm94IGFubm90YXRpb24uCiMgVGhlIHNhbmRib3ggY2dyb3VwIGlzIGNvbnN0cmFpbmVkIGlmIHRoZXJlIGlzIG5vIGNvbnRhaW5lciB0eXBlIGFubm90YXRpb24uCiMgU2VlOiBodHRwczovL2dvZG9jLm9yZy9naXRodWIuY29tL2thdGEtY29udGFpbmVycy9ydW50aW1lL3ZpcnRjb250YWluZXJzI0NvbnRhaW5lclR5cGUKc2FuZGJveF9jZ3JvdXBfb25seT1mYWxzZQoKIyBJZiBzcGVjaWZpZWQsIHNhbmRib3hfYmluZF9tb3VudHMgaWRlbnRpZmllZHMgaG9zdCBwYXRocyB0byBiZSBtb3VudGVkIChybykgaW50byB0aGUgc2FuZGJveGVzIHNoYXJlZCBwYXRoLgojIFRoaXMgaXMgb25seSB2YWxpZCBpZiBmaWxlc3lzdGVtIHNoYXJpbmcgaXMgdXRpbGl6ZWQuIFRoZSBwcm92aWRlZCBwYXRoKHMpIHdpbGwgYmUgYmluZG1vdW50ZWQgaW50byB0aGUgc2hhcmVkIGZzIGRpcmVjdG9yeS4KIyBJZiBkZWZhdWx0cyBhcmUgdXRpbGl6ZWQsIHRoZXNlIG1vdW50cyBzaG91bGQgYmUgYXZhaWxhYmxlIGluIHRoZSBndWVzdCBhdCBgL3J1bi9rYXRhLWNvbnRhaW5lcnMvc2hhcmVkL2NvbnRhaW5lcnMvc2FuZGJveC1tb3VudHNgCiMgVGhlc2Ugd2lsbCBub3QgYmUgZXhwb3NlZCB0byB0aGUgY29udGFpbmVyIHdvcmtsb2FkcywgYW5kIGFyZSBvbmx5IHByb3ZpZGVkIGZvciBwb3RlbnRpYWwgZ3Vlc3Qgc2VydmljZXMuCnNhbmRib3hfYmluZF9tb3VudHM9W10KCiMgRW5hYmxlZCBleHBlcmltZW50YWwgZmVhdHVyZSBsaXN0LCBmb3JtYXQ6IFsiYSIsICJiIl0uCiMgRXhwZXJpbWVudGFsIGZlYXR1cmVzIGFyZSBmZWF0dXJlcyBub3Qgc3RhYmxlIGVub3VnaCBmb3IgcHJvZHVjdGlvbiwKIyB0aGV5IG1heSBicmVhayBjb21wYXRpYmlsaXR5LCBhbmQgYXJlIHByZXBhcmVkIGZvciBhIGJpZyB2ZXJzaW9uIGJ1bXAuCiMgU3VwcG9ydGVkIGV4cGVyaW1lbnRhbCBmZWF0dXJlczoKIyAoZGVmYXVsdDogW10pCmV4cGVyaW1lbnRhbD1bXQoKIyBJZiBlbmFibGVkLCB1c2VyIGNhbiBydW4gcHByb2YgdG9vbHMgd2l0aCBzaGltIHYyIHByb2Nlc3MgdGhyb3VnaCBrYXRhLW1vbml0b3IuCiMgKGRlZmF1bHQ6IGZhbHNlKQojIGVuYWJsZV9wcHJvZiA9IHRydWUKCiMgV0FSTklORzogQWxsIHRoZSBvcHRpb25zIGluIHRoZSBmb2xsb3dpbmcgc2VjdGlvbiBoYXZlIG5vdCBiZWVuIGltcGxlbWVudGVkIHlldC4KIyBUaGlzIHNlY3Rpb24gd2FzIGFkZGVkIGFzIGEgcGxhY2Vob2xkZXIuIERPIE5PVCBVU0UgSVQhCltpbWFnZV0KIyBDb250YWluZXIgaW1hZ2Ugc2VydmljZS4KIwojIE9mZmxvYWQgdGhlIENSSSBpbWFnZSBtYW5hZ2VtZW50IHNlcnZpY2UgdG8gdGhlIEthdGEgYWdlbnQuCiMgKGRlZmF1bHQ6IGZhbHNlKQpzZXJ2aWNlX29mZmxvYWQgPSB0cnVlCgojIENvbnRhaW5lciBpbWFnZSBkZWNyeXB0aW9uIGtleXMgcHJvdmlzaW9uaW5nLgojIEFwcGxpZXMgb25seSBpZiBzZXJ2aWNlX29mZmxvYWQgaXMgdHJ1ZS4KIyBLZXlzIGNhbiBiZSBwcm92aXNpb25lZCBsb2NhbGx5IChlLmcuIHRocm91Z2ggYSBzcGVjaWFsIGNvbW1hbmQgb3IKIyBhIGxvY2FsIGZpbGUpIG9yIHJlbW90ZWx5ICh1c3VhbGx5IGFmdGVyIHRoZSBndWVzdCBpcyByZW1vdGVseSBhdHRlc3RlZCkuCiMgVGhlIHByb3Zpc2lvbiBzZXR0aW5nIGlzIGEgY29tcGxldGUgVVJMIHRoYXQgbGV0cyB0aGUgS2F0YSBhZ2VudCBkZWNpZGUKIyB3aGljaCBtZXRob2QgdG8gdXNlIGluIG9yZGVyIHRvIGZldGNoIHRoZSBrZXlzLgojCiMgS2V5cyBjYW4gYmUgc3RvcmVkIGluIGEgbG9jYWwgZmlsZSwgaW4gYSBtZWFzdXJlZCBhbmQgYXR0ZXN0ZWQgaW5pdHJkOgojcHJvdmlzaW9uPWRhdGE6Ly8vbG9jYWwva2V5L2ZpbGUKIwojIEtleXMgY291bGQgYmUgZmV0Y2hlZCB0aHJvdWdoIGEgc3BlY2lhbCBjb21tYW5kIG9yIGJpbmFyeSBmcm9tIHRoZQojIGluaXRyZCAoZ3Vlc3QpIGltYWdlLCBlLmcuIGEgZmlybXdhcmUgY2FsbDoKI3Byb3Zpc2lvbj1maWxlOi8vL3BhdGgvdG8vYmluL2ZldGNoZXIvaW4vZ3Vlc3QKIwojIEtleXMgY2FuIGJlIHJlbW90ZWx5IHByb3Zpc2lvbmVkLiBUaGUgS2F0YSBhZ2VudCBmZXRjaGVzIHRoZW0gZnJvbSBlLmcuCiMgYSBIVFRQUyBVUkw6CiNwcm92aXNpb249aHR0cHM6Ly9teS1rZXktYnJva2VyLmZvby90ZW5hbnQvPHRlbmFudC1pZD4=
        filesystem: root
        mode: 0644
        path: /opt/kata/configuration-remote.toml
